
Вера Жуковская
Telegram - @verisola

HW1 Client_Server

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃1. Прочитать про клиент-серверную архитектуру                                                                                 ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Клиент-серверная архитектура (КСА)-это архитектура взаимодействия клиента и сервера, где клиент отправляет запрос серверу     ┃
┃по сети, тот его принимает, обрабатывает и пересылает ответ клиенту, который получает и отображает его.                       ┃
┃Клиентом может быть ПО (браузер, desktop-приложение...), компьютер.                                                           ┃
┃Сервером может быть специальное системное оборудование, компьютер и программа (веб-сервер), установленная на компьютере.      ┃
┃Как один сервер может обслуживать сразу несколько клиентов, так и один клиент может взаимодействовать с несколькими серверами.┃
┃Также клиент-серверная архитектура может включать Базу данных (БД), к которой обращается сервер за информацией.               ┃
┃БД хранит информацию в виде взаимосвязанных или не взаимосвязанных файлов или таблиц в структурированном виде и управляется   ┃
┃СУБД (системами управления баз данных).                                                                                       ┃
┃СУБД-набор программных средств для создания БД, внесения туда информации и                                                    ┃
┃её редактирования.                                                                                                            ┃
┃В одноуровневой КСА все компоненты хранятся на одной машине: (Клиент ⇄ Сервер ⇄ БД)                                           ┃
┃В двухуровневой КСА БД хранится на сервере: (Клиент) ⇄ (Сервер+БД)                                                            ┃
┃В трёхуровневой КСА все компоненты хранятся на разных машинах: (Клиент) ⇄ (Сервер) ⇄ (БД)                                     ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃2. Что такое HTTP (Hypertext Transport Protocol) и HTTPS (Hypertext Transport Protocol Secure).                               ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Это протокол обмена гипертекстовой информацией между клиентом и сервером на основе языка HTML (HyperText Markup Language).    ┃
┃Благодаря HTTP происходит обмен данными внутри сети и доступ к веб-ресурсам.                                                  ┃
┃                                                                                                                              ┃
┃Клиент ----(HTTP-запрос)---▶Сервер                                                                                            ┃
┃                                                                                                                              ┃
┃Клиент ◀---(HTTP-ответ)-----Сервер                                                                                            ┃
┃                                                                                                                              ┃
┃HTTPS-расширение протокола HTTP, которое передаёт данные в зашифрованном виде для обеспечения их безопасности.                ┃
┃Шифрование происходит сразу на клиенте при каждом новом https-запросе.                                                        ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃3. HTTP методы - это типы http-запросов, которые указывают серверу, какое действие нужно совершить с ресурсом.                ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃То есть благодаря различным методам мы может не только извлекать информацию из сервера, но и вносить туда новую,              ┃
┃редактировать, удалять...                                                                                                     ┃
┃Например, несколько методов:                                                                                                  ┃
┃GET-запрашивает данные у сервера                                                                                              ┃
┃HEAD-также запрашивает данные у сервера, но выводит только заголовки http-ответа                                              ┃
┃POST-отправляет данные на сервер через тело http-запроса                                                                      ┃
┃PUT-заменяет или создаёт новые данные                                                                                         ┃
┃PATCH-частично заменяет данные                                                                                                ┃
┃DELETE-удаляет данные с сервера                                                                                               ┃
┃TRACE-позволяет клиенту получить от сервера сообщение целиком, чтобы увидеть полное содержимое запроса, которое               ┃
┃ранее было отправлено клиентом серверу.                                                                                       ┃
┃                                                                                                                              ┃
┃HTTP-запрос включает:                                                                                                         ┃
┃ -стартовую строку с методом, адресом ресурса, версией протокола                                                              ┃
┃ -заголовки со служебной инф-ей типа "имя:значение" - информация о браузере, адрес хоста и т.д.                               ┃
┃ -тело сообщения - передаваемые на сервер данные (может отсутствовать)                                                        ┃
┃                                                                                                                              ┃
┃HTTP-ответ включает:                                                                                                          ┃
┃-стартовую строку с версией протокола и статус-кодом ответа                                                                   ┃
┃-заголовки со служебной инф-ей типа "имя:значение" - информация о браузере, адрес хоста и т.д.                                ┃
┃-тело сообщения - передаваемые клиенту данные, например html-страница, файл, картинка... (может отсутствовать)                ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃4. HTTP статус-коды сервера.                                                                                                  ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃HTTP статус-код является частью стартовой строки http-ответа и служит для оповещения клиента об успехе/неудаче запроса        ┃
┃или выполняет только информативную функцию. Значение успеха/неудачи зависит от типа http-метода.                              ┃
┃Прописывается как число из трёх цифр и следующее за ним краткое пояснение на англ.языке.                                      ┃
┃Все коды делятся на 5 классов, каждый из которых включает определённый список кодов:                                          ┃
┃1xx (информационные)-запрос в процессе, действия от клиента не требуются. Например, 102 Processing (идёт обработка)           ┃
┃2xx (успешно). Например, 200 ОК, 201 Created (успешно создан новый ресурс)                                                    ┃
┃3xx (переадресация). Например, 304 Not Modified (нет необходимости повторного запроса)                                        ┃
┃4xx (ошибка на стороне клиента). Например, 403 Forbidden (запрещен доступ к ресурсу), 401 Unauthorized (не авторизован,       ┃
┃не хватает валидных данных для доступа)                                                                                       ┃
┃5xx (ошибка на стороне сервера). Например, 502 Bad Gateway (один сервер получил некорректный ответ от другого сервера).       ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃5. Что такое ядро браузера.                                                                                                   ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Браузерный движок (browser engine) - это программа, которая обеспечивает функциональность всех сервисов браузера.             ┃
┃Браузер состоит из оболочки и движка. Оболочка-все сервисы браузера, через которые мы отдаём команды движку.                  ┃
┃А браузерный движок преобразует полученные от сервера цифровые изображения, файлы HTML, XML, стили форматирования CSS и т.д.  ┃
┃в изображения на экране монитора, т.е. служит для отображения и редактирования веб-страниц.                                   ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃6. Какие браузеры какие ядра используют.                                                                                      ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Safari (Apple) - WebKit                                                                                                       ┃
┃Chromium (Google) - WebKit                                                                                                    ┃
┃Microsoft Edge (Microsoft) - EdgeHTML                                                                                         ┃
┃Chrome (Google) - Blink                                                                                                       ┃
┃Яндекс.Браузер ("Яндекс") - Blink                                                                                             ┃
┃Mozilla Firefox (Mozilla Corporation)- Gecko                                                                                  ┃
┃Opera (Opera Software) - Presto                                                                                               ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃7. Что такое API (Application Programming Interface).                                                                         ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Прикладной программный интерфейс для взаимодействия двух систем, код, набор функций на сервере, который через http-протокол   ┃
┃предоставляет данные одного приложения другому, находясь в одном приложении даёт возможность использовать функции другого.    ┃
┃Например, переиспользование на своём сайте информации других производителей (инф-я о погоде, валютные курсы Нацбанка,         ┃
┃бронирование билетов Belavia через сайт частного туроператора, оплата онлайн покупок с помощью сервиса какого-либо банка...)  ┃
┃Два наиболее известных веб-сервиса API - это SOAP и REST.                                                                     ┃
┃SOAP API (Simple Object Access Protocol) - протокол передачи данных на основе расширяемого языка разметки XML (Extensible     ┃
┃Markup Language).                                                                                                             ┃
┃Более гибкий и самый популярный REST API (Representational State Transfer) - стиль написания кода на основе текстового        ┃
┃формата обмена данными JSON.                                                                                                  ┃
┃API выступает посредником между клиентом и сервером.                                                                          ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃8. Что такое endpoint.                                                                                                        ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Это адрес, куда отправляется http-запрос. Им может быть целый URL или его часть, как конечная точка маршрута.                 ┃
┃Endpoints используются в API и кроме URL также содержат методы запроса типа GET, PUT  и т.д. (см.п.3).                        ┃
┃Таким образом, каждый запрос - это отдельный endpoint.                                                                        ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃9. URL (URI, URL, URN)-cтроки, состоящие из символов.                                                                         ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃URI (Uniform Resource Identifier) - общее понятие, которое включает в себя и URL и URN, как по отдельности, так и вместе.     ┃
┃Определяет любой ресурс в Интернете (файл, изображение, любой документ, ящик эл.почты...)                                     ┃
┃URL (Uniform Resource Locator) - чаcть URI, адрес ресурса в Интернете.                                                        ┃
┃URN (Uniform Resource Name) - часть URI, имя ресурса в Интернете.                                                             ┃
┃Например: URI https://habr.com/ru/flows/design/ , где                                                                         ┃
┃          URL https://habr.com/                                                                                               ┃
┃          URN ru/flows/design/                                                                                                ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃10. Идемпотентные HTTP методы.                                                                                                ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Это методы, с помощью которых повторное однократное или многократное отправление запроса не изменяет                          ┃
┃состояния сервера. Код статуса ответа сервера может отличаться между первым и повторным запросом. Например, нельзя повторно   ┃
┃удалить уже стёртые данные. Но состояние сервера останется неизменным. Такими методами могут быть все безопасные методы и     ┃
┃правильно выполненные методы GET, HEAD, PUT, DELETE.                                                                          ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃11. Безопасные HTTP методы.                                                                                                   ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Это методы, не меняющие состояние сервера, проводящие операции только чтения. Например, GET, HEAD и OPTIONS.                  ┃
┃Все безопасные методы идемпотентны.                                                                                           ┃
┃Однако, например, методы PUT и DELETE идемпотенты при корректной реализации, но сами по себе небезопасны.                     ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃12. Идентификация, Аутентификация, Авторизация.                                                                               ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Эти три понятия связаны друг с другом и сосуществуют вместе.                                                                  ┃
┃Идентификация - однозначно определяет объект, человека с помощью индивидуального идентификатора, которым может быть ID, логин,┃
┃e-mail, номер телефона, ФИО ...                                                                                               ┃
┃Аутентификация - определяет подлинность объекта, человека по пин-коду, паролю, отпечатку пальца, кодовому слову...            ┃
┃Авторизация - успешный результат идентификации и аутентификации, когда объект или человек получает доступ к какой-либо системе┃
┃и права для осуществления тех или иных функций.                                                                               ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃13. Что такое IP.                                                                                                             ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Как правило, визуально это строка из 4х чисел, разделённых точками. Возможный интервал каждого числа от 0 до 255.             ┃
┃IP-адрес уникально идентифицирует каждое устройство в компьютерной сети. Таким образом, каждый компьютер,                     ┃
┃маршрутизатор или веб-сайт имеет свой отличный от других адрес в сети для связи и передачи данных.                            ┃
┃Внешние IP-адреса используются в глобальной сети.                                                                             ┃
┃Внутренние IP-адреса используются в пределах локальной сети (частного предприятия, отдельного дома...)                        ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃14. Что такое октеты в DNS (Domain Name System).                                                                              ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃DNS - система доменных имён, которая присваивает каждому IP-адресу веб-сайта личное буквенное имя, которое называют доменом.  ┃
┃То есть домен-это имя сайта в сети.                                                                                           ┃
┃В адресную строку браузера вводится доменное имя искомого сайта, сервера DNS мгновенно преобразуют его в соответствующий ему  ┃
┃IP-адрес. И уже по IP-адресу вы попадаете на нужный сайт. Так значительно упрощается поиск сайтов среди их многообразия в     ┃
┃сети.                                                                                                                         ┃
┃Например, apple.com,  tripadvisor.ru, airport.by ...                                                                          ┃
┃                                                                                                                              ┃
┃Октет-это десятичное число, равен 8 бит, часть IP-адреса. Например, IP 162.55.220.72 состоит из четырёх октет, разделённых    ┃
┃между собой точкой.                                                                                                           ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃15. Что такое порт, сколько портов у Linux сервера.                                                                           ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Порт-визуально это число (от 0 до 65535), которое указывается после IP-адреса и двоеточия.                                    ┃
┃Например, 162.55.220.72:5005, где 162.55.220.72-IP, 5005-порт.                                                                ┃
┃Чтобы компьютеры не путали данные, получаемые из сети, используются                                                           ┃
┃виртуальные порты, которые определяют к какой программе относятся те или иные данные.                                         ┃
┃Так система распределяет поступление данных через разные порты.                                                               ┃
┃                                                                                                                              ┃
┃Теоретически возможно максимальное количество портов 65535.                                                                   ┃
┃-0 не может использоваться                                                                                                    ┃
┃-наиболее часто используемые порты до 1023 уже общеизвестны (напр., 443 - HTTPS,                                              ┃
┃80 - HTTP)                                                                                                                    ┃
┃-пользовательские порты от 1024 до 49151, (напр., 1433 - Microsoft SQL Server; 3724 -	World of Warcraft Online gaming MMORPG)┃
┃-частные порты от 49152 до 65535 не регистрируются, они нужны лишь для временных соединений.                                  ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃16. Уровни OSI.                                                                                                               ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃OSI (Open System Interconnection) - общепринятая модель, специально созданный эталон, описывающий                             ┃
┃взаимодействие всего сетевого оборудования, независимо от того, какие используются устройства и технологии с каждой из сторон.┃
┃Включает 7 уровней:                                                                                                           ┃
┃1.Физический (physical) - происходит передача сигнала первого уровня (оптический, радиосигнал, электрический). Ethernet       ┃
┃(передача данных по проводам).                                                                                                ┃
┃2.Канальный (data link) - проверяет и исправляет погрешности сигнала, полученного с физического уровня. Уже используются      ┃
┃  MAC-адреса (Media Access Control) для определения пути и логический канал  (LLC, Logical Link Control). Ethernet, мосты,    ┃
┃  коммутаторы.                                                                                                                ┃
┃3.Сетевой (network) - обеспечивает определение пути, осуществляет маршрутизацию трафика (DNS-запрос, IP-адрес).               ┃
┃4.Транспортный (transport) - отвечает за доставку информации по внешним каналам сети. Передача основана на протоколах         ┃
┃  TCP (Transmission Control Protocol)-контролируемая передача данных; UDP (User Datagram Protocol)-потеря части данных не     ┃
┃  принципиальна.                                                                                                              ┃
┃5.Сеансовый (session) - отвечает за организацию сеансов связи между приложениями (создание, окончание, обмен инф-й,           ┃
┃  синхронизация...).                                                                                                          ┃
┃6.Уровень представления (presentation)-преобразует в подходящий формат данные, полученные от уровня 7. Также может выполнять  ┃
┃  конвертацию и шифрование данных.                                                                                            ┃
┃7.Прикладной (application)-описывает взаимодействие пользователя (приложений ПК) с сетью (напр., протоколы HTTP и FTP).       ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃17. Хедеры http запросов (http headers).                                                                                      ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Являются частью http-запросов/ответов и дают инф-ию о браузере, сервере, дате и времени, формате передаваемых файлов и т. д.  ┃
┃(в виде текстовых пар типа "имя:значение"). Например (см.п.3),                                                                ┃
┃GET /tutorials/other/top-20-mysql-best-practices/ HTTP/1.1 - стартовая строка                                                 ┃
┃Хедеры:                                                                                                                       ┃
┃Host: net.tutsplus.com                                                                                                        ┃
┃User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)     ┃
┃Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8                                                       ┃
┃Accept-Language: en-us,en;q=0.5                                                                                               ┃
┃Accept-Encoding: gzip,deflate                                                                                                 ┃
┃Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7                                                                                ┃
┃Keep-Alive: 300                                                                                                               ┃
┃Connection: keep-alive                                                                                                        ┃
┃Cookie: PHPSESSID=r2t5uvjq435r4q7ib3vtdjq120                                                                                  ┃
┃Pragma: no-cache                                                                                                              ┃
┃Cache-Control: no-cache                                                                                                       ┃
┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
